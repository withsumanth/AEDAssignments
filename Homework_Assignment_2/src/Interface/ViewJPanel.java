/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.AirplaneDetails;
import Business.AirplaneDetailsHistory;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sumanth
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    private AirplaneDetailsHistory airplaneDetailsHist;
    public ViewJPanel(AirplaneDetailsHistory airplaneDetailsHist) {
        initComponents();
        this.airplaneDetailsHist = airplaneDetailsHist;
        populateJTable();
        searchTxtField.setText("");
        searchChkBox2.setVisible(false);
        JScrollPane sp = new JScrollPane();
        this.add(sp);
    }
    
    public void populateJTable(){
        DefaultTableModel tabMod = (DefaultTableModel) airDetTable.getModel();
        tabMod.setRowCount(0);
        for(AirplaneDetails ad:  airplaneDetailsHist.getAirDetHist()){
            Object row[] = new Object[3];
            row[0] = ad;
            row[1] = ad.getYearOfMan();
            row[2] = ad.getSerNo();
            tabMod.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        airDetTable = new javax.swing.JTable();
        viewAirDetJBtn = new javax.swing.JButton();
        yearOfManLabel3 = new javax.swing.JLabel();
        numOfSeatsLabel3 = new javax.swing.JLabel();
        serNoLabel3 = new javax.swing.JLabel();
        modelNoLabel3 = new javax.swing.JLabel();
        timeOfFleetCatLabel3 = new javax.swing.JLabel();
        maintCertExpLabel3 = new javax.swing.JLabel();
        availablityLabel3 = new javax.swing.JLabel();
        airportNameLabel9 = new javax.swing.JLabel();
        airplaneNameTxt3 = new javax.swing.JTextField();
        yearOfManTxt3 = new javax.swing.JTextField();
        numOfSeatsTxt3 = new javax.swing.JTextField();
        serNoTxt3 = new javax.swing.JTextField();
        modelNoTxt3 = new javax.swing.JTextField();
        airplaneNameLabel3 = new javax.swing.JLabel();
        timeOfFleetCatTxt3 = new javax.swing.JTextField();
        airportNameTxt3 = new javax.swing.JTextField();
        maintCertExpChkBox3 = new javax.swing.JCheckBox();
        availablityChkBox3 = new javax.swing.JCheckBox();
        airportNameLabel10 = new javax.swing.JLabel();
        manuNameTxt3 = new javax.swing.JTextField();
        airportNameLabel11 = new javax.swing.JLabel();
        dateOfFlyTxt3 = new javax.swing.JTextField();
        searchListBox = new javax.swing.JComboBox<>();
        serachBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchJTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        searchJTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        searchTxtField = new javax.swing.JTextField();
        searchLabDest = new javax.swing.JLabel();
        searchTxtDest = new javax.swing.JTextField();
        airportNameLabel13 = new javax.swing.JLabel();
        originTxt = new javax.swing.JTextField();
        originTxt1 = new javax.swing.JTextField();
        airportNameLabel14 = new javax.swing.JLabel();
        destinationTxt = new javax.swing.JTextField();
        searchChkBox = new javax.swing.JPanel();
        chkBxLabel = new javax.swing.JLabel();
        searchChkBox1 = new javax.swing.JPanel();
        searchChkBox2 = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(1000, 1000));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("View Airplane Details");

        airDetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airplane Name", "Year of Manufacture", "Serial Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(airDetTable);

        viewAirDetJBtn.setText("View");
        viewAirDetJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAirDetJBtnActionPerformed(evt);
            }
        });

        yearOfManLabel3.setText("  Year of Manufacture: ");

        numOfSeatsLabel3.setText("Number of Seats:");

        serNoLabel3.setText("Serail Number:");

        modelNoLabel3.setText("Model Number:");

        timeOfFleetCatLabel3.setText("Fleet Catalog updated Date:");

        maintCertExpLabel3.setText("Maintainance Certficate Expired:");

        availablityLabel3.setText("Availablity of Airplane:");

        airportNameLabel9.setText("Airport Name:");

        airplaneNameTxt3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airplaneNameTxt3ActionPerformed(evt);
            }
        });

        airplaneNameLabel3.setText("Airplane Name:");

        availablityChkBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availablityChkBox3ActionPerformed(evt);
            }
        });

        airportNameLabel10.setText("Manufacturer Name:");

        airportNameLabel11.setText("Date of Departure:");

        searchListBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First Available Airplane", "Currently Available Airplanes", "Airplanes made of Boeing", "Manufactured year", "Number of seats Available", "Serial Number", "Model Number", "Manufacturer Name", "Last Fleet Catalog updated date", "Airport Name for available Planes", "Maintainance Cerificate Expired" }));
        searchListBox.setToolTipText("");
        searchListBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchListBoxActionPerformed(evt);
            }
        });

        serachBtn.setText("Search");
        serachBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serachBtnActionPerformed(evt);
            }
        });

        searchJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airplane Name", "Date of Departure", "Serial Number", "Year of Manufacture", "Number of Seats", "Model Number", "Fleet Catalog updated Date", "Maintainance Certificate Expired", "Availablity of Airplane", "Airport Name", "Manufacturer Name", "Origin", "Destination"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(searchJTable);

        searchJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airplane Name", "Date of Departure", "Serial Number", "Year of Manufacture", "Number of Seats", "Model Number", "Fleet Catalog updated Date", "Maintainance Certificate Expired", "Availablity of Airplane", "Airport Name", "Manufacturer Name", "Origin", "Destination"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(searchJTable1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Search Based on Criteria ");

        searchLabel.setText("Origin City");

        searchTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTxtFieldActionPerformed(evt);
            }
        });

        searchLabDest.setText("Destination City");

        searchTxtDest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTxtDestActionPerformed(evt);
            }
        });

        airportNameLabel13.setText("             Origin");

        airportNameLabel14.setText("          Destination");

        javax.swing.GroupLayout searchChkBoxLayout = new javax.swing.GroupLayout(searchChkBox);
        searchChkBox.setLayout(searchChkBoxLayout);
        searchChkBoxLayout.setHorizontalGroup(
            searchChkBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchChkBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkBxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchChkBoxLayout.setVerticalGroup(
            searchChkBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchChkBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkBxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchChkBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchChkBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchChkBox1Layout = new javax.swing.GroupLayout(searchChkBox1);
        searchChkBox1.setLayout(searchChkBox1Layout);
        searchChkBox1Layout.setHorizontalGroup(
            searchChkBox1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchChkBox1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(searchChkBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        searchChkBox1Layout.setVerticalGroup(
            searchChkBox1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchChkBox1Layout.createSequentialGroup()
                .addComponent(searchChkBox2)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(viewAirDetJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(230, 230, 230)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(118, 118, 118)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchListBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(searchLabel)
                                        .addGap(104, 104, 104)
                                        .addComponent(searchLabDest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(searchTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(searchTxtDest, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(20, 20, 20)
                                .addComponent(serachBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(airportNameLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(128, 128, 128)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(airportNameLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(airplaneNameLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(numOfSeatsLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(serNoLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(modelNoLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(yearOfManLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(32, 32, 32)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(modelNoTxt3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(serNoTxt3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(numOfSeatsTxt3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(yearOfManTxt3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(airplaneNameTxt3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateOfFlyTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(destinationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(45, 45, 45)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addComponent(availablityLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(timeOfFleetCatLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(maintCertExpLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(airportNameLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(airportNameLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(airportNameLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(maintCertExpChkBox3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(availablityChkBox3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(airportNameTxt3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(timeOfFleetCatTxt3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                .addComponent(manuNameTxt3, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(originTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 258, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchChkBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchChkBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewAirDetJBtn)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(airplaneNameLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(airplaneNameTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(yearOfManLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yearOfManTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(numOfSeatsLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numOfSeatsTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(serNoLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(serNoTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(modelNoLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modelNoTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dateOfFlyTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(airportNameLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(175, 175, 175)
                                    .addComponent(airportNameLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(timeOfFleetCatLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(13, 13, 13)
                                    .addComponent(maintCertExpLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(availablityLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(airportNameLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(airportNameLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(39, 39, 39))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(airportNameLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(destinationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(searchListBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchLabDest, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(serachBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(searchTxtDest, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(timeOfFleetCatTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(maintCertExpChkBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availablityChkBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(airportNameTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manuNameTxt3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(originTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchChkBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchChkBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchChkBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchChkBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchChkBox2ActionPerformed

    private void searchTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTxtFieldActionPerformed

    private void serachBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serachBtnActionPerformed
        ArrayList<AirplaneDetails> modArrList= new ArrayList();
        ArrayList<AirplaneDetails> airDetForSearch = airplaneDetailsHist.getAirDetHist();
        int count = 0;
        String originValue = searchTxtField.getText();
        String destinationValue = searchTxtDest.getText();
        if(searchListBox.getSelectedItem().equals("First Available Airplane")){
            List<Date> dateValues = new ArrayList();
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getOrigin().equals(originValue) && eachSearchValue.getDestination().equals(destinationValue)&& eachSearchValue.getAvailablity().equals("Yes")){
                    dateValues.add(eachSearchValue.getDateOfFly());
                }
            }
            Collections.sort(dateValues);
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(!dateValues.isEmpty() && eachSearchValue.getDateOfFly()== dateValues.get(0)){
                    modArrList.add(count, eachSearchValue);
                    break;
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Currently Available Airplanes")){
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(searchChkBox2.isSelected()){
                    if(eachSearchValue.getAvailablity().equals("Yes") && eachSearchValue.getOrigin().equals(originValue) && eachSearchValue.getDestination().equals(destinationValue)){
                    modArrList.add(count, eachSearchValue);
                    count++;
                    }
                }else{
                    if(eachSearchValue.getAvailablity().equals("No") && eachSearchValue.getOrigin().equals(originValue) && eachSearchValue.getDestination().equals(destinationValue)){
                    modArrList.add(count, eachSearchValue);
                    count++;
                    }
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Manufactured year")){
            String yearValue = searchTxtField.getText();
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getYearOfMan() == (Integer.parseInt(yearValue))){
                    modArrList.add(count, eachSearchValue);
                    count++;
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Number of seats Available")){
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(searchChkBox2.isSelected()){
                    if(eachSearchValue.getAvailablity().equals("Yes") && (eachSearchValue.getNumOfSeats()>Integer.parseInt(originValue) && eachSearchValue.getNumOfSeats()<Integer.parseInt(destinationValue))){                    modArrList.add(count, eachSearchValue);
                    count++;
                    }
                }else{
                    if(eachSearchValue.getAvailablity().equals("No") && (eachSearchValue.getNumOfSeats()>Integer.parseInt(originValue) && eachSearchValue.getNumOfSeats()<Integer.parseInt(destinationValue))){
                    modArrList.add(count, eachSearchValue);
                    count++;
                    }
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Serial Number")){
            String serNoValue = searchTxtField.getText();
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getSerNo().equals(serNoValue)){
                    modArrList.add(count, eachSearchValue);
                    count++;
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Model Number")){
            String modelNoValue = searchTxtField.getText();
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getModelNo().equals(modelNoValue)){
                    modArrList.add(count, eachSearchValue);
                    count++;
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Manufacturer Name")){
            String manuNamValue = searchTxtField.getText();
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getManuName().equals(manuNamValue)){
                    modArrList.add(count, eachSearchValue);
                    count++;
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Last Fleet Catalog updated date")){
            List<Date> dateValues = new ArrayList();
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getAirplaneName().equals(originValue)){
                    dateValues.add(eachSearchValue.getDateOfFly());
                }
            }
            Collections.sort(dateValues);
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(!dateValues.isEmpty() && eachSearchValue.getDateOfFly()== dateValues.get((dateValues.size())-1)){
                    modArrList.add(count, eachSearchValue);
                    break;
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Airport Name for available Planes")){
            String airNamValue = searchTxtField.getText();
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getAirportName().equals(airNamValue) && eachSearchValue.getAvailablity().equals("Yes")){
                    modArrList.add(count, eachSearchValue);
                    count++;
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Maintainance Cerificate Expired")){
            String maintCertValue ;
            if(searchChkBox2.isSelected()){
                maintCertValue = "Yes";
            }else{
                maintCertValue = "No";
            }
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getMaintCertExp().equals(maintCertValue)){
                    modArrList.add(count, eachSearchValue);
                    count++;
                }
            }
        }else if(searchListBox.getSelectedItem().equals("Airplanes made of Boeing")){
            for(AirplaneDetails eachSearchValue: airDetForSearch){
                if(eachSearchValue.getAirplaneName().equals("Boeing")){
                    modArrList.add(count, eachSearchValue);
                    count++;
                }
            }
        }
        populateJTable1(modArrList);
    }//GEN-LAST:event_serachBtnActionPerformed

    private void searchListBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchListBoxActionPerformed
        if(searchListBox.getSelectedItem().equals("First Available Airplane")){
            searchLabel.setText("Origin City");
            searchLabDest.setText("Destination City");
            searchTxtField.setText("");
            searchTxtDest.setText("");
            searchLabel.setVisible(true);
            searchLabDest.setVisible(true);
            searchTxtField.setVisible(true);
            searchTxtDest.setVisible(true);
            searchChkBox.setVisible(false);
            searchChkBox1.setVisible(false);
            searchChkBox2.setVisible(false);
        }else if(searchListBox.getSelectedItem().equals("Currently Available Airplanes")){
            searchLabel.setVisible(true);
            searchLabDest.setVisible(true);
            searchTxtField.setVisible(true);
            searchTxtDest.setVisible(true);
            searchLabel.setText("Origin City");
            searchLabDest.setText("Destination City");
            searchTxtField.setText("");
            searchTxtDest.setText("");
            chkBxLabel.setText("Available Planes");
            searchChkBox.setVisible(true);
            searchChkBox2.setVisible(true);
            searchChkBox1.setVisible(true);
        }else if(searchListBox.getSelectedItem().equals("Manufactured year")){
            searchLabel.setVisible(true);
            searchTxtField.setVisible(true);
            searchLabel.setText("Year");
            searchTxtField.setText("");
            searchLabDest.setVisible(false);
            searchChkBox.setVisible(false);
            searchChkBox1.setVisible(false);
            searchChkBox2.setVisible(false);
            searchTxtDest.setVisible(false);
        }else if(searchListBox.getSelectedItem().equals("Number of seats Available")){
            searchLabel.setVisible(true);
            searchLabDest.setVisible(true);
            searchTxtField.setVisible(true);
            searchTxtDest.setVisible(true);
            searchLabel.setText("Minimum No. of Seats ");
            searchLabDest.setText("Maximum No. of Seats");
            searchTxtField.setText("");
            searchTxtDest.setText("");
            chkBxLabel.setText("Available Planes");
            searchChkBox.setVisible(true);
            searchChkBox2.setVisible(true);
            searchChkBox1.setVisible(true);
        }else if(searchListBox.getSelectedItem().equals("Serial Number")){
            searchLabel.setText("Enter Number");
            searchTxtField.setText("");
            searchLabel.setVisible(true);
            searchTxtField.setVisible(true);
            searchChkBox.setVisible(false);
            searchChkBox1.setVisible(false);
            searchChkBox2.setVisible(false);
            searchLabDest.setVisible(false);
            searchTxtDest.setVisible(false);
        }else if(searchListBox.getSelectedItem().equals("Model Number")){
            searchLabel.setVisible(true);
            searchTxtField.setVisible(true);
            searchLabel.setText("Enter Number");
            searchTxtField.setText("");
            searchLabDest.setVisible(false);
            searchChkBox.setVisible(false);
            searchChkBox1.setVisible(false);
            searchChkBox2.setVisible(false);
            searchTxtDest.setVisible(false);
        }else if(searchListBox.getSelectedItem().equals("Manufacturer Name")){
            searchLabel.setVisible(true);
            searchTxtField.setVisible(true);
            searchLabel.setText("Enter Name");
            searchTxtField.setText("");
            searchLabDest.setVisible(false);
            searchChkBox.setVisible(false);
            searchChkBox1.setVisible(false);
            searchChkBox2.setVisible(false);
            searchTxtDest.setVisible(false);
        }else if(searchListBox.getSelectedItem().equals("Last Fleet Catalog updated date")){
            searchLabel.setVisible(true);
            searchTxtField.setVisible(true);
            searchLabel.setText("Airplane Name");
            searchTxtField.setText("");
            searchLabDest.setVisible(false);
            searchChkBox.setVisible(false);
            searchChkBox1.setVisible(false);
            searchChkBox2.setVisible(false);
            searchTxtDest.setVisible(false);
        }else if(searchListBox.getSelectedItem().equals("Airport Name for available Planes")){
            searchLabel.setVisible(true);
            searchTxtField.setVisible(true);
            searchLabel.setText("Enter Name");
            searchTxtField.setText("");
            searchChkBox.setVisible(false);
            searchChkBox1.setVisible(false);
            searchChkBox2.setVisible(false);
            searchLabDest.setVisible(false);
            searchTxtDest.setVisible(false);
        }else if(searchListBox.getSelectedItem().equals("Maintainance Cerificate Expired")){
            searchLabel.setVisible(false);
            searchTxtField.setVisible(false);
            searchChkBox.setVisible(true);
            searchChkBox1.setVisible(true);
            searchChkBox2.setVisible(true);
            searchLabDest.setVisible(false);
            searchTxtDest.setVisible(false);
            chkBxLabel.setText("Expired");
        }else if(searchListBox.getSelectedItem().equals("Airplanes made of Boeing")){
            searchLabel.setVisible(false);
            searchTxtField.setVisible(false);
            searchLabDest.setVisible(false);
            searchTxtDest.setVisible(false);
            searchChkBox.setVisible(false);
            searchChkBox1.setVisible(false);
            searchChkBox2.setVisible(false);
        }
    }//GEN-LAST:event_searchListBoxActionPerformed

    private void availablityChkBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availablityChkBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availablityChkBox3ActionPerformed

    private void airplaneNameTxt3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airplaneNameTxt3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_airplaneNameTxt3ActionPerformed

    private void viewAirDetJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAirDetJBtnActionPerformed
        int selectedRow  = airDetTable.getSelectedRow();
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        if(selectedRow>=0){
            AirplaneDetails airDet = (AirplaneDetails) airDetTable.getValueAt(selectedRow, 0);
            airplaneNameTxt3.setText(airDet.getAirplaneName());
            try {
                dateOfFlyTxt3.setText(formatter.format(airDet.getDateOfFly()));
                timeOfFleetCatTxt3.setText(formatter.format(airDet.getTimeOfFleetCat()));
            } catch (Exception ex) {
                Logger.getLogger(CreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            yearOfManTxt3.setText(String.valueOf(airDet.getYearOfMan()));
            numOfSeatsTxt3.setText(String.valueOf(airDet.getNumOfSeats()));
            serNoTxt3.setText(String.valueOf(airDet.getSerNo()));
            modelNoTxt3.setText(String.valueOf(airDet.getModelNo()));
            if(airDet.getMaintCertExp().equals("Yes")){
                maintCertExpChkBox3.setSelected(true);
            }
            if(airDet.getAvailablity().equals("Yes")){
                availablityChkBox3.setSelected(true);
            }
            airportNameTxt3.setText(airDet.getAirportName());
            manuNameTxt3.setText(airDet.getManuName());
            originTxt.setText(airDet.getOrigin());
            destinationTxt.setText(airDet.getDestination());
        }else{
            JOptionPane.showMessageDialog(null, "Please Select any Row");
        }
    }//GEN-LAST:event_viewAirDetJBtnActionPerformed

    private void searchTxtDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTxtDestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTxtDestActionPerformed

    public void populateJTable1(ArrayList<AirplaneDetails> modArrList){
        DefaultTableModel tabMod = (DefaultTableModel) searchJTable.getModel();
        tabMod.setRowCount(0);
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        for(AirplaneDetails ad:  modArrList){
            Object row[] = new Object[13];
            row[0] = ad;
            row[1] = formatter.format(ad.getDateOfFly());
            row[2] = ad.getSerNo();
            row[3] = ad.getYearOfMan();
            row[4] = ad.getNumOfSeats();
            row[5] = ad.getModelNo();
            row[6] = formatter.format(ad.getTimeOfFleetCat());
            row[7] = ad.getMaintCertExp();
            row[8] = ad.getAvailablity();
            row[9] = ad.getAirportName();
            row[10] = ad.getManuName();
            row[11] = ad.getOrigin();
            row[12] = ad.getDestination();
            tabMod.addRow(row);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable airDetTable;
    private javax.swing.JLabel airplaneNameLabel3;
    private javax.swing.JTextField airplaneNameTxt3;
    private javax.swing.JLabel airportNameLabel10;
    private javax.swing.JLabel airportNameLabel11;
    private javax.swing.JLabel airportNameLabel13;
    private javax.swing.JLabel airportNameLabel14;
    private javax.swing.JLabel airportNameLabel9;
    private javax.swing.JTextField airportNameTxt3;
    private javax.swing.JCheckBox availablityChkBox3;
    private javax.swing.JLabel availablityLabel3;
    private javax.swing.JLabel chkBxLabel;
    private javax.swing.JTextField dateOfFlyTxt3;
    private javax.swing.JTextField destinationTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JCheckBox maintCertExpChkBox3;
    private javax.swing.JLabel maintCertExpLabel3;
    private javax.swing.JTextField manuNameTxt3;
    private javax.swing.JLabel modelNoLabel3;
    private javax.swing.JTextField modelNoTxt3;
    private javax.swing.JLabel numOfSeatsLabel3;
    private javax.swing.JTextField numOfSeatsTxt3;
    private javax.swing.JTextField originTxt;
    private javax.swing.JTextField originTxt1;
    private javax.swing.JPanel searchChkBox;
    private javax.swing.JPanel searchChkBox1;
    private javax.swing.JCheckBox searchChkBox2;
    private javax.swing.JTable searchJTable;
    private javax.swing.JTable searchJTable1;
    private javax.swing.JLabel searchLabDest;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JComboBox<String> searchListBox;
    private javax.swing.JTextField searchTxtDest;
    private javax.swing.JTextField searchTxtField;
    private javax.swing.JLabel serNoLabel3;
    private javax.swing.JTextField serNoTxt3;
    private javax.swing.JButton serachBtn;
    private javax.swing.JLabel timeOfFleetCatLabel3;
    private javax.swing.JTextField timeOfFleetCatTxt3;
    private javax.swing.JButton viewAirDetJBtn;
    private javax.swing.JLabel yearOfManLabel3;
    private javax.swing.JTextField yearOfManTxt3;
    // End of variables declaration//GEN-END:variables
}

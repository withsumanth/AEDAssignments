/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.AirplaneDetails;
import Business.AirplaneDetailsHistory;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sumanth
 */
public class UpdateJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateJPanel
     */
    private AirplaneDetailsHistory airplaneDetailsHist;
    public UpdateJPanel(AirplaneDetailsHistory airplaneDetailsHist) {
        initComponents();
        this.airplaneDetailsHist = airplaneDetailsHist;
        populateJTable();
        JScrollPane sp = new JScrollPane();
        this.add(sp);
    }
    
    public void populateJTable(){
        DefaultTableModel tabMod = (DefaultTableModel) airDetTable.getModel();
        tabMod.setRowCount(0);
        for(AirplaneDetails ad:  airplaneDetailsHist.getAirDetHist()){
            Object row[] = new Object[3];
            row[0] = ad;
            row[1] = ad.getYearOfMan();
            row[2] = ad.getSerNo();
            tabMod.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        airDetTable = new javax.swing.JTable();
        getSelBtn = new javax.swing.JButton();
        airplaneNameLabel3 = new javax.swing.JLabel();
        airplaneNameTxt3 = new javax.swing.JTextField();
        yearOfManLabel3 = new javax.swing.JLabel();
        yearOfManTxt3 = new javax.swing.JTextField();
        numOfSeatsLabel3 = new javax.swing.JLabel();
        numOfSeatsTxt3 = new javax.swing.JTextField();
        serNoLabel3 = new javax.swing.JLabel();
        serNoTxt3 = new javax.swing.JTextField();
        modelNoLabel3 = new javax.swing.JLabel();
        modelNoTxt3 = new javax.swing.JTextField();
        airportNameLabel11 = new javax.swing.JLabel();
        dateOfFlyTxt3 = new javax.swing.JTextField();
        airportNameLabel14 = new javax.swing.JLabel();
        destinationTxt = new javax.swing.JTextField();
        timeOfFleetCatLabel3 = new javax.swing.JLabel();
        timeOfFleetCatTxt3 = new javax.swing.JTextField();
        maintCertExpLabel3 = new javax.swing.JLabel();
        maintCertExpChkBox3 = new javax.swing.JCheckBox();
        availablityLabel3 = new javax.swing.JLabel();
        airportNameLabel9 = new javax.swing.JLabel();
        airportNameTxt3 = new javax.swing.JTextField();
        availablityChkBox3 = new javax.swing.JCheckBox();
        airportNameLabel10 = new javax.swing.JLabel();
        manuNameTxt3 = new javax.swing.JTextField();
        airportNameLabel13 = new javax.swing.JLabel();
        originTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        updateJPanel = new javax.swing.JButton();

        setLayout(null);

        airDetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airplane Name", "Year of Manufacture", "Serial Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(airDetTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(19, 105, 480, 140);

        getSelBtn.setText("Get Selected Details");
        getSelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSelBtnActionPerformed(evt);
            }
        });
        add(getSelBtn);
        getSelBtn.setBounds(430, 250, 180, 23);

        airplaneNameLabel3.setText("Airplane Name:");
        add(airplaneNameLabel3);
        airplaneNameLabel3.setBounds(50, 290, 107, 25);

        airplaneNameTxt3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airplaneNameTxt3ActionPerformed(evt);
            }
        });
        add(airplaneNameTxt3);
        airplaneNameTxt3.setBounds(190, 290, 132, 30);

        yearOfManLabel3.setText("  Year of Manufacture: ");
        add(yearOfManLabel3);
        yearOfManLabel3.setBounds(20, 320, 139, 25);
        add(yearOfManTxt3);
        yearOfManTxt3.setBounds(190, 320, 132, 30);

        numOfSeatsLabel3.setText("Number of Seats:");
        add(numOfSeatsLabel3);
        numOfSeatsLabel3.setBounds(50, 360, 107, 25);
        add(numOfSeatsTxt3);
        numOfSeatsTxt3.setBounds(190, 360, 132, 30);

        serNoLabel3.setText("Serail Number:");
        add(serNoLabel3);
        serNoLabel3.setBounds(50, 390, 107, 25);
        add(serNoTxt3);
        serNoTxt3.setBounds(190, 390, 132, 30);

        modelNoLabel3.setText("Model Number:");
        add(modelNoLabel3);
        modelNoLabel3.setBounds(50, 430, 107, 25);
        add(modelNoTxt3);
        modelNoTxt3.setBounds(190, 430, 132, 30);

        airportNameLabel11.setText("Date of Departure (dd-mm-yyyy):");
        add(airportNameLabel11);
        airportNameLabel11.setBounds(9, 460, 190, 25);
        add(dateOfFlyTxt3);
        dateOfFlyTxt3.setBounds(190, 460, 132, 30);

        airportNameLabel14.setText("          Destination:");
        add(airportNameLabel14);
        airportNameLabel14.setBounds(20, 490, 128, 20);
        add(destinationTxt);
        destinationTxt.setBounds(190, 490, 132, 30);

        timeOfFleetCatLabel3.setText("Fleet Catalog updated Date (dd-mm-yyyy):");
        add(timeOfFleetCatLabel3);
        timeOfFleetCatLabel3.setBounds(337, 290, 240, 25);
        add(timeOfFleetCatTxt3);
        timeOfFleetCatTxt3.setBounds(570, 290, 132, 30);

        maintCertExpLabel3.setText("Maintainance Certficate Expired:");
        add(maintCertExpLabel3);
        maintCertExpLabel3.setBounds(370, 320, 190, 25);
        add(maintCertExpChkBox3);
        maintCertExpChkBox3.setBounds(570, 320, 21, 21);

        availablityLabel3.setText("Availablity of Airplane:");
        add(availablityLabel3);
        availablityLabel3.setBounds(380, 360, 147, 25);

        airportNameLabel9.setText("Airport Name:");
        add(airportNameLabel9);
        airportNameLabel9.setBounds(420, 390, 107, 25);
        add(airportNameTxt3);
        airportNameTxt3.setBounds(570, 380, 132, 30);

        availablityChkBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availablityChkBox3ActionPerformed(evt);
            }
        });
        add(availablityChkBox3);
        availablityChkBox3.setBounds(570, 360, 21, 21);

        airportNameLabel10.setText("Manufacturer Name:");
        add(airportNameLabel10);
        airportNameLabel10.setBounds(390, 420, 135, 25);
        add(manuNameTxt3);
        manuNameTxt3.setBounds(570, 420, 132, 30);

        airportNameLabel13.setText("             Origin:");
        add(airportNameLabel13);
        airportNameLabel13.setBounds(430, 460, 120, 25);

        originTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                originTxtActionPerformed(evt);
            }
        });
        add(originTxt);
        originTxt.setBounds(570, 460, 132, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Update Airplane Details");
        add(jLabel1);
        jLabel1.setBounds(131, 65, 257, 22);

        updateJPanel.setText("Update");
        updateJPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJPanelActionPerformed(evt);
            }
        });
        add(updateJPanel);
        updateJPanel.setBounds(490, 520, 110, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void airplaneNameTxt3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airplaneNameTxt3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_airplaneNameTxt3ActionPerformed

    private void availablityChkBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availablityChkBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availablityChkBox3ActionPerformed

    private void getSelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSelBtnActionPerformed
        int selectedRow  = airDetTable.getSelectedRow();
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        if(selectedRow>=0){
            AirplaneDetails airDet = (AirplaneDetails) airDetTable.getValueAt(selectedRow, 0);
            airplaneNameTxt3.setText(airDet.getAirplaneName());
            try {
                dateOfFlyTxt3.setText(formatter.format(airDet.getDateOfFly()));
                timeOfFleetCatTxt3.setText(formatter.format(airDet.getTimeOfFleetCat()));
            } catch (Exception ex) {
                Logger.getLogger(CreateJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            yearOfManTxt3.setText(String.valueOf(airDet.getYearOfMan()));
            numOfSeatsTxt3.setText(String.valueOf(airDet.getNumOfSeats()));
            serNoTxt3.setText(String.valueOf(airDet.getSerNo()));
            modelNoTxt3.setText(String.valueOf(airDet.getModelNo()));
            if(airDet.getMaintCertExp().equals("Yes")){
                maintCertExpChkBox3.setSelected(true);
            }
            if(airDet.getAvailablity().equals("Yes")){
                availablityChkBox3.setSelected(true);
            }
            airportNameTxt3.setText(airDet.getAirportName());
            manuNameTxt3.setText(airDet.getManuName());
            originTxt.setText(airDet.getOrigin());
            destinationTxt.setText(airDet.getDestination());
        }else{
            JOptionPane.showMessageDialog(null, "Please Select any Row");
        }
    }//GEN-LAST:event_getSelBtnActionPerformed

    private void updateJPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJPanelActionPerformed
        int selectedRow  = airDetTable.getSelectedRow();
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        Boolean checkAnyChange = false;
        Boolean checkAnyDateExc = false;
        String availablityValue;
        String maintCertValue;
        if(selectedRow>=0){
            AirplaneDetails airDet = (AirplaneDetails) airDetTable.getValueAt(selectedRow, 0);
            if(!airDet.getAirplaneName().equals(airplaneNameTxt3.getText()) && airplaneNameTxt3.getText().trim().length()!=0){
              airDet.setAirplaneName(airplaneNameTxt3.getText()); 
              checkAnyChange = true;
            }
            if(!airDet.getSerNo().equals(serNoTxt3.getText()) && serNoTxt3.getText().trim().length()!=0){
              airDet.setSerNo(serNoTxt3.getText()); 
              checkAnyChange = true;
            }
            if(!airDet.getModelNo().equals(modelNoTxt3.getText()) && modelNoTxt3.getText().trim().length()!=0){
              airDet.setModelNo(modelNoTxt3.getText()); 
              checkAnyChange = true;
            }
            if(!airDet.getModelNo().equals(modelNoTxt3.getText()) && modelNoTxt3.getText().trim().length()!=0){
              airDet.setModelNo(modelNoTxt3.getText()); 
              checkAnyChange = true;
            }
            if(!airDet.getAirportName().equals(airportNameTxt3.getText()) && airportNameTxt3.getText().trim().length()!=0){
              airDet.setAirportName(airportNameTxt3.getText()); 
              checkAnyChange = true;
            }
            if(!airDet.getManuName().equals(manuNameTxt3.getText()) && manuNameTxt3.getText().trim().length()!=0){
              airDet.setManuName(manuNameTxt3.getText()); 
              checkAnyChange = true;
            }
            if(!airDet.getOrigin().equals(originTxt.getText()) && originTxt.getText().trim().length()!=0){
              airDet.setOrigin(originTxt.getText()); 
              checkAnyChange = true;
            }
            if(!airDet.getDestination().equals(destinationTxt.getText()) && destinationTxt.getText().trim().length()!=0){
              airDet.setDestination(destinationTxt.getText()); 
              checkAnyChange = true;
            }
            if(availablityChkBox3.isSelected()){
                availablityValue="Yes";
            }else{
                availablityValue="No";
            }
            if(maintCertExpChkBox3.isSelected()){
                maintCertValue="Yes";
            }else{
                maintCertValue="No";
            }
            if(!airDet.getAvailablity().equals(availablityValue)){
                airDet.setAvailablity(availablityValue);
                checkAnyChange = true;
            }
            if(!airDet.getMaintCertExp().equals(maintCertValue)){
                airDet.setMaintCertExp(maintCertValue);
                checkAnyChange = true;
            }
            if(!formatter.format(airDet.getDateOfFly()).equals(dateOfFlyTxt3.getText()) && dateOfFlyTxt3.getText().trim().length()!=0){
                try {
                    airDet.setDateOfFly(formatter.parse(dateOfFlyTxt3.getText()));
                    checkAnyChange = true;
                } catch (ParseException ex) {
                    checkAnyChange = false;
                    checkAnyDateExc = true;
                    JOptionPane.showMessageDialog(null, "Please enter date format in dd-mm-yyyy");
                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(!formatter.format(airDet.getTimeOfFleetCat()).equals(timeOfFleetCatTxt3.getText()) && timeOfFleetCatTxt3.getText().trim().length()!=0){
                try {
                    airDet.setTimeOfFleetCat(formatter.parse(timeOfFleetCatTxt3.getText()));
                    checkAnyChange = true;
                } catch (ParseException ex) {
                    checkAnyChange = false;
                    checkAnyDateExc = true;
                    JOptionPane.showMessageDialog(null, "Please enter date format in dd-mm-yyyy");
                    Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(yearOfManTxt3.getText().trim().length()!=0 && airDet.getYearOfMan() != (Integer.parseInt(yearOfManTxt3.getText()))){
               airDet.setYearOfMan(Integer.parseInt(yearOfManTxt3.getText()));
               checkAnyChange = true;
            }
            if(numOfSeatsTxt3.getText().trim().length()!=0 && airDet.getNumOfSeats()!= (Integer.parseInt(numOfSeatsTxt3.getText()))){
               airDet.setNumOfSeats(Integer.parseInt(numOfSeatsTxt3.getText()));
               checkAnyChange = true;
            }
            if(checkAnyChange){
                JOptionPane.showMessageDialog(null, "Changes updated Successfully");
                populateJTable(); 
            }else if(!checkAnyDateExc){
                JOptionPane.showMessageDialog(null, "None of the fields were changed to update");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please Select any Row");
        }
    }//GEN-LAST:event_updateJPanelActionPerformed

    private void originTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_originTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_originTxtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable airDetTable;
    private javax.swing.JLabel airplaneNameLabel3;
    private javax.swing.JTextField airplaneNameTxt3;
    private javax.swing.JLabel airportNameLabel10;
    private javax.swing.JLabel airportNameLabel11;
    private javax.swing.JLabel airportNameLabel13;
    private javax.swing.JLabel airportNameLabel14;
    private javax.swing.JLabel airportNameLabel9;
    private javax.swing.JTextField airportNameTxt3;
    private javax.swing.JCheckBox availablityChkBox3;
    private javax.swing.JLabel availablityLabel3;
    private javax.swing.JTextField dateOfFlyTxt3;
    private javax.swing.JTextField destinationTxt;
    private javax.swing.JButton getSelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox maintCertExpChkBox3;
    private javax.swing.JLabel maintCertExpLabel3;
    private javax.swing.JTextField manuNameTxt3;
    private javax.swing.JLabel modelNoLabel3;
    private javax.swing.JTextField modelNoTxt3;
    private javax.swing.JLabel numOfSeatsLabel3;
    private javax.swing.JTextField numOfSeatsTxt3;
    private javax.swing.JTextField originTxt;
    private javax.swing.JLabel serNoLabel3;
    private javax.swing.JTextField serNoTxt3;
    private javax.swing.JLabel timeOfFleetCatLabel3;
    private javax.swing.JTextField timeOfFleetCatTxt3;
    private javax.swing.JButton updateJPanel;
    private javax.swing.JLabel yearOfManLabel3;
    private javax.swing.JTextField yearOfManTxt3;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.AdminLogin.Revenue;

import Business.Business;
import Business.Order;
import Business.OrderList;
import Business.Product;
import Business.SalesPerson;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sumanth
 */
public class TopTenSalesPerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TopTenSalesPerJPanel
     */
    List<String> salesPerson;
    JPanel userProcessContainer;
    Business business;

    public TopTenSalesPerJPanel(JPanel userProcessContainer, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        salesPerson = new ArrayList();
        salesRevenue();
    }

    public void salesRevenue() {
        ArrayList<OrderList> listOfOrders = business.getMasterOrderCatalog().getOrderList();
        List<String> allMarkets = new ArrayList();
        for (OrderList ol : listOfOrders) {
            for (Order o : ol.getOrderList()) {
                allMarkets.add(o.getMarket().getMarketName());
                salesPerson.add(o.getSalesPerson().getSalesPersonName());
            }
        }
        allMarkets = allMarkets.stream().distinct().collect(Collectors.toList());
        salesPerson = salesPerson.stream().distinct().collect(Collectors.toList());
        marketNameBox.removeAllItems();
        for (String s : allMarkets) {
            marketNameBox.addItem(s);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        marketNameBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        prodJTable = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        add(marketNameBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 230, 60));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Top 10 sales persons by revenues broken down by market");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 500, 50));

        prodJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sales Person Name", "Revenue", "Actual Price", "Target Price", "Gap", "Missed Revenue/Profit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(prodJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 750, 120));

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, 130, 40));

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, -1, -1));

        jLabel3.setText("Market Name");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 124, 110, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String marketName = (String) marketNameBox.getSelectedItem();
        ArrayList<OrderList> listOfOrders = business.getMasterOrderCatalog().getOrderList();
        ArrayList<Product> prodList = new ArrayList();
        Map<String, ArrayList<Double>> map = new HashMap();
        ArrayList<Double> allPrices;
        double price;
        double actualPrice;
        double targetPrice;
        for (String p : salesPerson) {
            price = 0;
            actualPrice = 0;
            targetPrice = 0;
            allPrices = new ArrayList();
            for (OrderList ol : listOfOrders) {
                for (Order o : ol.getOrderList()) {
                    if (o.getMarket().getMarketName().equals(marketName) && o.getSalesPerson().getSalesPersonName().equals(p)) {
                        prodList.add(o.getProduct());
                        price = price + (o.getQuantity() * o.getSalesPrice());
                        actualPrice = actualPrice +(o.getQuantity()*o.getProduct().getPrice());
                        targetPrice = targetPrice +(o.getQuantity()*o.getProduct().getPrice()*1.2);
                    }
                }
            }
            allPrices.add(price);
            allPrices.add(actualPrice);
            allPrices.add(targetPrice);
            map.put(p, allPrices);
        }
        Set<Entry<String, ArrayList<Double>>> set = map.entrySet();
        List<Entry<String, ArrayList<Double>>> list = new ArrayList<Entry<String, ArrayList<Double>>>(set);
        Collections.sort(list, new Comparator<Map.Entry<String, ArrayList<Double>>>() {
            public int compare(Map.Entry<String, ArrayList<Double>> o1, Map.Entry<String, ArrayList<Double>> o2) {
                return (o2.getValue().get(0)).compareTo(o1.getValue().get(0));
            }
        });
        DefaultTableModel model = (DefaultTableModel) prodJTable.getModel();
        model.setRowCount(0);
        int sizeOfMap;
        if (list.size() < 10) {
            sizeOfMap = list.size();
        } else {
            sizeOfMap = 10;
        }
        for (int i = 0; i < sizeOfMap; i++) {
            Object row[] = new Object[6];
            row[0] = list.get(i).getKey();
            row[1] = list.get(i).getValue().get(0);
            row[2] = list.get(i).getValue().get(1);
            row[3] = list.get(i).getValue().get(2);
            row[4] = (list.get(i).getValue().get(2))-(list.get(i).getValue().get(1));
            row[5] = (list.get(i).getValue().get(0))-(list.get(i).getValue().get(2));
            model.addRow(row);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox marketNameBox;
    private javax.swing.JTable prodJTable;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}
